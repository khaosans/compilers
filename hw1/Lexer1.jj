//----------------------------------------------------------------------
// CS321 Assignment 1 (Fall 2014)
//
// miniJava Lexer1 (JavaCC Specification)
//----------------------------------------------------------------------

PARSER_BEGIN(Lexer1)
import java.io.*;

public class Lexer1 {
  static String tknName = null;
  public static void main(String [] args) {

    try {
          Lexer1 lexer = new Lexer1(System.in);
          Token tkn = lexer.getNextToken();
          int tknCnt = 0;
          while (tkn.kind != 0) {
            System.out.print("(" + tkn.beginLine + "," + tkn.beginColumn + ")\t"
          			 + (tknName==null? "" : tknName) );
            if (tkn.kind == INTLIT || tkn.kind ==ID || tkn.kind ==STRLIT) {
    	  try {
    	    if(tkn.kind ==INTLIT){
    	    System.out.println("("+Integer.parseInt(tkn.image)+")");
    	    }else{
    	        System.out.println("("+tkn.image+")");
    	    }
    	  } catch (NumberFormatException e) {
    	    throw new TokenMgrError("Integer overflow: " + tkn.image, 0);
    	  }
    	}
    	else {
    	  System.out.println(tkn.image);
    	}
            tknCnt++;
            tknName = null;	      	// reset for next token
            tkn = lexer.getNextToken();
          }
          System.out.println("Total: " + tknCnt + " tokens");
        } catch (TokenMgrError e) {
          System.err.println(e);
        }
      }
  }

PARSER_END(Lexer1)

// Token definitions
//
SKIP:   { " " | "\t" | "\n" | "\r" } 	// white space chars

SKIP :  // single-line comment
{
  <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

TOKEN:  // keywords
{
  "class"
  |"extend"
  |"static"
  |"public"
  |"void"
  |"int"
  |"boolean"
  |"new"
  |"if"
  |"else"
  |"while"
  |"return"
  |"main"
  |"true"
  |"false"
  |"String"
  |"System"
  |"out"
  |"println"
}

TOKEN:  // identifiers and integer literals
{
  <#DIGIT:  ["0"-"9"]>            // internal tokens
| <#LETTER: ["A"-"Z"]|["a"-"z"]>
| <ID:      (<LETTER>)+((<DIGIT>)?(<LETTER>)?)*>{ Lexer1.tknName = "ID"; }
| <INTLIT:  (<DIGIT>)+>  { Lexer1.tknName = "INTLIT"; }
| <STRLIT: "\"" (~["\"","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\""> { Lexer1.tknName = "STRLIT"; }
}

TOKEN:  // operators
{
  <OPERATOR: "+"|"-"|"*"|"/"|"&&"|"||"|"!"|"=="|"!="|"<"|"<="|">"|">=">
  |<DELIMITER: "="|";"|","|"."|"("|")"|"["|"]"|"{"|"}">
}